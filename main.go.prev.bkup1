package main

import (
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"database/sql"
	_ "github.com/go-sql-driver/mysql"
	"bytes"
	"strconv"
)

// declare chart serie type
type Serie struct {
	Name  string `json:"name"`
	Value int    `json:"value"`
	/*
	Open string `json:"open"`
	High int    `json:"high"`
	Low int    `json:"low"`
	Close int    `json:"close"`
	Volume int    `json:"volume"`
	*/
}

type Stk_Serie struct {
	Id int
	Seq int
	Open int
	High int
	Low int
	Close int
	Vol int
}
var db *sql.DB

func handler(w http.ResponseWriter, r *http.Request) {
	t, err := template.ParseFiles("templates/page.html")
	if err != nil {
		panic(err)
	}
	t.Execute(w, nil)
}

func CityHandler(res http.ResponseWriter, req *http.Request) {
	data, _ := json.Marshal("{'cities':'Toronto, Montreal, Ottawa'}")
	res.Header().Set("Content-Type", "application/json; charset=utf-8")
	res.Write(data)
}


func handlerCSV(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	t, err := template.ParseFiles("csv-data/msft.csv")
	if err != nil {
		panic(err)
	}
	t.Execute(w, nil)
}



func handlerJson1(res http.ResponseWriter, req *http.Request) {
	res.Header().Set("Access-Control-Allow-Origin", "*")

	//error code for data
	//data, _ := json.Marshal("[{'name':'oranges','value':100},{'name':'bananas','value':200},{'name':'apples','value':300}]")

	//working code data data
	data, _ := json.Marshal("[{\"name\":\"oranges\",\"value\":100},{\"name\":\"bananas\",\"value\":200},{\"name\":\"apples\",\"value\":300}]")

	res.Header().Set("Content-Type", "application/json; charset=utf-8")
	res.Write(data)


	fmt.Println("aa1 : data")
	fmt.Println(data)
	fmt.Println("aa2 : string(data)")
	fmt.Println(string(data))
	fmt.Println("aa3")


}


func handlerJson2(res http.ResponseWriter, req *http.Request) {

	res.Header().Set("Access-Control-Allow-Origin", "*")
	data_DB_series := getFruits(3)
	// decode chart data to JSON
	data_json, err := json.Marshal(data_DB_series)

	if err != nil {
		http.Error(res, err.Error(), 500)
		return
	}

	//res.Header().Set("Content-Type", "application/json; charset=utf-8")
	res.Header().Set("Content-Type", "application/json")
	res.Write(data_json)

	/*
	fmt.Println("bb0 : db series")
	fmt.Println(data_DB_series)
	fmt.Println("bb1 : data_json")
	fmt.Println(data_json)
	fmt.Println("bb2 : string(data_json)")
	fmt.Println(string(data_json))
	fmt.Println("bb3")
	*/

}

func handlerJson3(res http.ResponseWriter, req *http.Request) {

	var str bytes.Buffer
	str.WriteString("[")

	fmt.Println(str.String())

	res.Header().Set("Access-Control-Allow-Origin", "*")
	fmt.Println("cc1 ")
	data_series := getFruits(1)

	for _, elem := range data_series {
		fmt.Println(elem.Name)
		fmt.Println(elem.Value)
		str.WriteString("{\"name\":\"")
		str.WriteString(elem.Name)
		str.WriteString("\",\"value\":")
		str.WriteString(strconv.Itoa(elem.Value))
		str.WriteString("}]")

	}


	fmt.Println("cc2 ")
	fmt.Println(str)
	fmt.Println("cc3 ")
	fmt.Println(str.String())
	res.Header().Set("Content-Type", "application/json")
	strByte := []byte(str.String())
	res.Write(strByte)


}


func handlerCSV3(res http.ResponseWriter, req *http.Request) {

	var str bytes.Buffer

	fmt.Println(str.String())

	res.Header().Set("Access-Control-Allow-Origin", "*")
	fmt.Println("cc1 ")
	data_series := getFruits(3)

	for _, elem := range data_series {
		fmt.Println(elem.Name)
		fmt.Println(elem.Value)
		str.WriteString(elem.Name)
		str.WriteString(",")
		str.WriteString(strconv.Itoa(elem.Value))
		str.WriteString("\n")

	}

	fmt.Println("cc2 ")
	fmt.Println(str)
	fmt.Println("cc3 ")
	fmt.Println(str.String())
	res.Header().Set("Content-Type", "application/csv")

	strByte := []byte(str.String())
	res.Write(strByte)
}


func handler_csv_stk(res http.ResponseWriter, req *http.Request) {

	var str bytes.Buffer
	res.Header().Set("Access-Control-Allow-Origin", "*")
	fmt.Println("ss1 ")
	stk_series := getStks()
	delim :=","
	for _, elem := range stk_series {
		open :=strconv.Itoa(elem.Open)
		high :=strconv.Itoa(elem.High)
		low :=strconv.Itoa(elem.Low)
		close :=strconv.Itoa(elem.Close)
		vol :=strconv.Itoa(elem.Vol)

		str.WriteString(open)
		str.WriteString(delim)
		str.WriteString(high)
		str.WriteString(delim)
		str.WriteString(low)
		str.WriteString(delim)
		str.WriteString(close)
		str.WriteString(delim)
		str.WriteString(vol)
		str.WriteString(delim)
		str.WriteString("\n")

	}

	fmt.Println("ss2 ")
	fmt.Println(str)
	fmt.Println("ss3 ")
	fmt.Println(str.String())
	res.Header().Set("Content-Type", "application/csv")

	strByte := []byte(str.String())
	res.Write(strByte)
}

// init db and page template
func init() {
	//pageTemplate = template.Must(template.ParseFiles("templates/index.html"))
	var err error
	db, err = sql.Open("mysql", "ayong:ayong@/anychart_db")
	if err != nil {
		panic(err)
	}
}

// get top fruits from database
func getFruits(count int) []Serie {
	res, err := db.Query("SELECT * FROM fruits ORDER BY value DESC LIMIT ?", count)
	if err != nil {
		panic(err)
	}
	defer res.Close()
	var (
		id, value int
		name      string
		series    []Serie
	)
	for res.Next() {
		err = res.Scan(&id, &name, &value)
		if err != nil {
			panic(err)
		}
		series = append(series, Serie{name, value})
	}
	return series
}


// get stk data from database
func getStks() []Stk_Serie {
	res, err := db.Query("SELECT id, seq, tkr_date, open, high, low, close, vol FROM stk where seq=2")
	if err != nil {
		panic(err)
	}
	defer res.Close()
	var (
		id, open, high, low, close, vol int
		stk_series    []Stk_Serie
	)
	for res.Next() {
		err = res.Scan(&id, &seq, &tkr_date, &open, &high, &low, &close, &vol)
		if err != nil {
			panic(err)
		}
		stk_series = append(stk_series, Stk_Serie{id, seq, tkr_date, open,high,low,close, vol})
	}
	return stk_series
}


func main() {
	port := os.Getenv("WEB_SERVER_PORT")
	if port == "" {
		port = ":8000"
	}
	fmt.Printf("Listening on port %s!\n", port)

	http.HandleFunc("/", handler)
	http.HandleFunc("/cities.json", CityHandler)

	http.HandleFunc("/get-csv-data", handlerCSV)
	http.HandleFunc("/get-csv3", handlerCSV3)
	http.HandleFunc("/get-csv-stk", handler_csv_stk)


	http.HandleFunc("/get-json1", handlerJson1)
	http.HandleFunc("/get-json2", handlerJson2)
	http.HandleFunc("/get-json3", handlerJson3)


	fs := http.FileServer(http.Dir("charts"))
	http.Handle("/charts/", http.StripPrefix("/charts/", fs))

	err := http.ListenAndServe(port, nil)
	if err != nil {
		log.Fatal("ListenAndServe: ", err)
	}
}
